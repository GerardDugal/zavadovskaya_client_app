// lib/data/repositories/course_repository_impl.dart

import 'dart:async';
import 'dart:convert';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:http/http.dart' as http;
import 'package:video_player/video_player.dart';
import 'package:zavadovskaya_client_app/data/models/category.dart';
import 'package:zavadovskaya_client_app/data/models/video.dart';
import '../models/course.dart';
import '../models/course_content.dart';
import 'course_repository.dart';
import '../../config.dart';

class CourseRepositoryImpl implements CourseRepository {
  final String baseUrl;
  final FlutterSecureStorage secureStorage;

  CourseRepositoryImpl(
      {required this.baseUrl, FlutterSecureStorage? secureStorage})
      : secureStorage = secureStorage ?? const FlutterSecureStorage();

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤, –≤–∫–ª—é—á–∞—è —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
  Future<Map<String, String>> _getHeaders() async {
    final token = await secureStorage.read(key: 'access_token');
    if (token == null) {
      print('üîí [CourseRepository] –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    } else {
      print('üîí [CourseRepository] –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –∑–∞–≥—Ä—É–∂–µ–Ω');
    }
    return {
      'Content-Type': 'application/json',
      if (token != null) 'Authorization': 'Bearer $token',
    };
  }

  

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤.
@override
Future<List<Course>> getAllCourses() async {
  print('üìö [CourseRepository] –ù–∞—á–∞–ª–æ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤');
  final headers = await _getHeaders();
  final uri = Uri.parse('$baseUrl/courses/courses/all');
  print('üì° –û—Ç–ø—Ä–∞–≤–∫–∞ GET –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ $uri');

  try {
    final response = await http
        .get(uri, headers: headers)
        .timeout(const Duration(seconds: 10));

    print('üì¨ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —Å –∫–æ–¥–æ–º: ${response.statusCode}');
    print('üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: ${response.body}');

    if (response.statusCode == 200) {
      final data =
          json.decode(utf8.decode(response.bodyBytes)) as List<dynamic>;
      print('‚úÖ [CourseRepository] –ü–æ–ª—É—á–µ–Ω–æ ${data.length} –∫—É—Ä—Å–æ–≤');

      final rawCourses = data.map((json) => Course.fromJson(json)).toList();

      // ‚è≥ –û–±–æ–≥–∞—â–∞–µ–º isPaid
      final coursesWithPayment = await Future.wait(rawCourses.map((course) async {
        final isPaid = await checkCoursePayment(course.id);
        return course.copyWith(isPaid: isPaid);
      }));

      return coursesWithPayment;
    } else {
      final error = json.decode(response.body)['message'] ?? '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤';
      print('‚ùå [CourseRepository] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤: $error');
      throw Exception(error);
    }
  } catch (e) {
    print('üö® [CourseRepository] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤: $e');
    throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.');
  }
}
  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –ø–æ –µ–≥–æ ID.
  @override
Future<Course> getCourseByID(int courseID) async {
  print('üîç [CourseRepository] –ù–∞—á–∞–ª–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ —Å ID: $courseID');
  final headers = await _getHeaders();
  final uri = Uri.parse('$baseUrl/courses/courses/by_id/$courseID');
  print('üì° –û—Ç–ø—Ä–∞–≤–∫–∞ GET –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ $uri');

  try {
    final response = await http
        .get(
          uri,
          headers: headers,
        )
        .timeout(const Duration(seconds: 10));

    print('üì¨ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —Å –∫–æ–¥–æ–º: ${response.statusCode}');
    print('üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: ${response.body}');

    if (response.statusCode == 200) {
      final data = json.decode(utf8.decode(response.bodyBytes));
      print('‚úÖ [CourseRepository] –ö—É—Ä—Å –ø–æ–ª—É—á–µ–Ω: ${data['title']}');
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç, –æ–∂–∏–¥–∞–µ–º—ã–π –º–æ–¥–µ–ª—å—é Course
      final courseData = {
        'id': data['id'],
        'title': data['title'],
        'description': data['description'],
        'photo_path': data['photo_path'],
        'cost': data['cost'],
        'category_id': data['category_id'],
      };
      
      final course = Course.fromJson(courseData);
      print('üìä –î–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–∞: $course');
      return course;
    } else {
      final error = json.decode(response.body)?['message'] ?? 
          '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ (–∫–æ–¥ ${response.statusCode})';
      print('‚ùå [CourseRepository] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞: $error');
      throw Exception(error);
    }
  }on http.ClientException catch (e) {
    print('üåê [CourseRepository] –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: $e');
    throw Exception('–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É');
  } catch (e) {
    print('üö® [CourseRepository] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: $e');
    throw Exception('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞');
  }
}

@override
Future<bool> checkCoursePayment(int courseId) async {
  final headers = await _getHeaders();
  final uri = Uri.parse('$baseUrl/payment/payment/status/by_course_id/$courseId');
  
  print('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã –¥–ª—è –∫—É—Ä—Å–∞ ID: $courseId');
  print('üì° –û—Ç–ø—Ä–∞–≤–∫–∞ GET –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ $uri');

  try {
    final response = await http.get(
      uri,
      headers: headers,
    ).timeout(const Duration(seconds: 10));

    print('üì¨ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —Å –∫–æ–¥–æ–º: ${response.statusCode}');
    print('üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: ${response.body}');

    // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å 200 - –æ–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞
    if (response.statusCode == 200) {
      print('‚úÖ –ö—É—Ä—Å –æ–ø–ª–∞—á–µ–Ω');
      return true;
    }
    
    // –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã - –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞
    print('‚ùå –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω');
    return false;
    
  } on TimeoutException {
    print('‚è± –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã');
    return false;
  } on http.ClientException catch (e) {
    print('üåê –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: $e');
    return false;
  } catch (e) {
    print('üö® –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: $e');
    return false;
  }
}

  @override
Future<List<Category>> getAllCategories() async {
  print('üîç [CourseRepository] –ù–∞—á–∞–ª–æ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
  final headers = await _getHeaders();
  final uri = Uri.parse('$baseUrl/courses/category/all');
  print('üì° –û—Ç–ø—Ä–∞–≤–∫–∞ GET –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ $uri');

  try {
    final response = await http
        .get(
          uri,
          headers: headers,
        )
        .timeout(Duration(seconds: 10));

    print('üì¨ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —Å –∫–æ–¥–æ–º: ${response.statusCode}');
    print('üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: ${response.body}');

    if (response.statusCode == 200) {
      final List<dynamic> data = json.decode(utf8.decode(response.bodyBytes));
      print('‚úÖ [CourseRepository] –ü–æ–ª—É—á–µ–Ω–æ ${data.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ JSON –≤ –æ–±—ä–µ–∫—Ç Category
      final categories = data.map((categoryJson) => Category.fromJson(categoryJson)).toList();
      
      return categories;
    } else {
      final error = json.decode(response.body)['message'] ?? '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π';
      print('‚ùå [CourseRepository] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: $error');
      throw Exception(error);
    }
  } catch (e) {
    print('üö® [CourseRepository] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: $e');
    throw Exception(
        '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.');
  }
}

@override
Future<List<Video>> getVideosByCourseId(int courseId) async {
  print('üîç [CourseRepository] –ù–∞—á–∞–ª–æ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ –¥–ª—è –∫—É—Ä—Å–∞ ID: $courseId');
  final headers = await _getHeaders();
  final uri = Uri.parse('https://zavadovskayakurs.ru/api/v1/stream/stream/by_course_id/$courseId');
  print('üì° –û—Ç–ø—Ä–∞–≤–∫–∞ GET –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ $uri');

  try {
    final response = await http
        .get(
          uri,
          headers: headers,
        )
        .timeout(Duration(seconds: 10));

    print('üì¨ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —Å –∫–æ–¥–æ–º: ${response.statusCode}');
    print('üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: ${response.body}');

    if (response.statusCode == 200) {
      final List<dynamic> data = json.decode(utf8.decode(response.bodyBytes));
      print('‚úÖ [CourseRepository] –ü–æ–ª—É—á–µ–Ω–æ ${data.length} –≤–∏–¥–µ–æ');
      
      final videos = data.map((videoJson) => Video.fromJson(videoJson)).toList();
      return videos;
    } else {
      final error = json.decode(response.body)['message'] ?? '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ';
      print('‚ùå [CourseRepository] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ: $error');
      throw Exception(error);
    }
  } on TimeoutException {
    print('‚è± [CourseRepository] –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∏–¥–µ–æ');
    throw Exception('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
  } on http.ClientException catch (e) {
    print('üåê [CourseRepository] –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: $e');
    throw Exception('–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É');
  } catch (e) {
    print('üö® [CourseRepository] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: $e');
    throw Exception('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∏–¥–µ–æ');
  }
}

@override
Future<VideoPlayerController> getVideoStream(int videoId) async {
  print('üîç [VideoRepository] –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∏–¥–µ–æ –ø–æ—Ç–æ–∫–∞ –¥–ª—è ID: $videoId');
  final headers = await _getHeaders();
  final uri = Uri.parse('https://zavadovskayakurs.ru/api/v1/stream/stream/by_id/$videoId');
  
  print('üì° –û—Ç–ø—Ä–∞–≤–∫–∞ GET –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ $uri —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏: $headers');

  try {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ
    final controller = VideoPlayerController.network(
      uri.toString(),
      httpHeaders: headers,
    );

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
    await controller.initialize();
    print('‚úÖ [VideoRepository] –í–∏–¥–µ–æ –ø–æ—Ç–æ–∫ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    
    return controller;
  } on TimeoutException {
    print('‚è± [VideoRepository] –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∏–¥–µ–æ –ø–æ—Ç–æ–∫–∞');
    throw Exception('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
  }
}

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –ø–æ –µ–≥–æ ID.

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫—É—Ä—Å–∞.
  // @override
  // Future<void> updateCourse(Course course) async {
  //   print(
  //       '‚úèÔ∏è [CourseRepository] –ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞ —Å ID: ${course.courseID}');
  //   final headers = await _getHeaders();
  //   final uri = Uri.parse('$baseUrl/UpdateCourse');
  //   print('üì° –û—Ç–ø—Ä–∞–≤–∫–∞ POST –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ $uri —Å —Ç–µ–ª–æ–º: ${json.encode({
  //         'courseID': course.courseID,
  //         'title': course.title,
  //         'description': course.description,
  //         'thumbnailUrl': course.thumbnailUrl,
  //         'category': course.category,
  //         'price': course.price,
  //       })}');

  //   try {
  //     final response = await http
  //         .post(
  //           uri,
  //           headers: headers,
  //           body: json.encode({
  //             'courseID': course.courseID,
  //             'title': course.title,
  //             'description': course.description,
  //             'thumbnailUrl': course.thumbnailUrl,
  //             'category': course.category,
  //             'price': course.price,
  //           }),
  //         )
  //         .timeout(Duration(seconds: 10)); // –î–æ–±–∞–≤–ª–µ–Ω —Ç–∞–π–º–∞—É—Ç 10 —Å–µ–∫—É–Ω–¥

  //     print('üì¨ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —Å –∫–æ–¥–æ–º: ${response.statusCode}');
  //     print('üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: ${response.body}');

  //     if (response.statusCode != 200) {
  //       final error =
  //           json.decode(response.body)['message'] ?? '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞';
  //       print('‚ùå [CourseRepository] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞: $error');
  //       throw Exception(error);
  //     } else {
  //       print('‚úÖ [CourseRepository] –ö—É—Ä—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω');
  //     }
  //   } catch (e) {
  //     print('üö® [CourseRepository] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–∞: $e');
  //     throw Exception(
  //         '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.');
  //   }
  // }
  // /// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞.
  // @override
  // Future<void> createCourse(Course course) async {
  //   print('üìù [CourseRepository] –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫—É—Ä—Å–∞: ${course.title}');
  //   final headers = await _getHeaders();
  //   final uri = Uri.parse('$baseUrl/CreateCourse');
  //   print('üì° –û—Ç–ø—Ä–∞–≤–∫–∞ POST –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ $uri —Å —Ç–µ–ª–æ–º: ${json.encode({
  //         'title': course.title,
  //         'description': course.description,
  //         'thumbnailUrl': course.thumbnailUrl,
  //         'category': course.category,
  //         'price': course.price,
  //       })}');

  //   try {
  //     final response = await http
  //         .post(
  //           uri,
  //           headers: headers,
  //           body: json.encode({
  //             'title': course.title,
  //             'description': course.description,
  //             'thumbnailUrl': course.thumbnailUrl,
  //             'category': course.category,
  //             'price': course.price,
  //           }),
  //         )
  //         .timeout(Duration(seconds: 10)); // –î–æ–±–∞–≤–ª–µ–Ω —Ç–∞–π–º–∞—É—Ç 10 —Å–µ–∫—É–Ω–¥

  //     print('üì¨ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —Å –∫–æ–¥–æ–º: ${response.statusCode}');
  //     print('üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: ${response.body}');

  //     if (response.statusCode != 200) {
  //       final error =
  //           json.decode(response.body)['message'] ?? '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫—É—Ä—Å–∞';
  //       print('‚ùå [CourseRepository] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫—É—Ä—Å–∞: $error');
  //       throw Exception(error);
  //     } else {
  //       print('‚úÖ [CourseRepository] –ö—É—Ä—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');
  //     }
  //   } catch (e) {
  //     print('üö® [CourseRepository] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—É—Ä—Å–∞: $e');
  //     throw Exception(
  //         '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫—É—Ä—Å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.');
  //   }
  // }

  /// –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫—É—Ä—Å–∞ –ø–æ –µ–≥–æ ID.
  // @override
  // Future<void> deleteCourse(int courseID) async {
  //   print('üóëÔ∏è [CourseRepository] –ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞ —Å ID: $courseID');
  //   final headers = await _getHeaders();
  //   final uri = Uri.parse('$baseUrl/DeleteCourse');
  //   print('üì° –û—Ç–ø—Ä–∞–≤–∫–∞ POST –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ $uri —Å —Ç–µ–ª–æ–º: ${json.encode({
  //         'courseID': courseID
  //       })}');

  //   try {
  //     final response = await http
  //         .post(
  //           uri,
  //           headers: headers,
  //           body: json.encode({'courseID': courseID}),
  //         )
  //         .timeout(Duration(seconds: 10)); // –î–æ–±–∞–≤–ª–µ–Ω —Ç–∞–π–º–∞—É—Ç 10 —Å–µ–∫—É–Ω–¥

  //     print('üì¨ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —Å –∫–æ–¥–æ–º: ${response.statusCode}');
  //     print('üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: ${response.body}');

  //     if (response.statusCode != 200) {
  //       final error =
  //           json.decode(response.body)['message'] ?? '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞';
  //       print('‚ùå [CourseRepository] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞: $error');
  //       throw Exception(error);
  //     } else {
  //       print('‚úÖ [CourseRepository] –ö—É—Ä—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω');
  //     }
  //   } catch (e) {
  //     print('üö® [CourseRepository] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–∞: $e');
  //     throw Exception(
  //         '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫—É—Ä—Å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.');
  //   }
  // }
}
