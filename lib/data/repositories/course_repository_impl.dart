// lib/data/repositories/course_repository_impl.dart

import 'dart:async';
import 'dart:convert';
import 'package:flutter/foundation.dart' show kIsWeb;
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:http/http.dart' as http;
import 'package:universal_html/html.dart' as html;
import 'package:video_player/video_player.dart';
import 'package:zavadovskaya_client_app/data/models/category.dart';
import 'package:zavadovskaya_client_app/data/models/video.dart';
import '../models/course.dart';
import '../models/course_content.dart';
import 'course_repository.dart';
import '../../config.dart';

class CourseRepositoryImpl implements CourseRepository {
  final String baseUrl;
  final FlutterSecureStorage secureStorage;
  

  CourseRepositoryImpl(
      {required this.baseUrl, FlutterSecureStorage? secureStorage})
      : secureStorage = secureStorage ?? const FlutterSecureStorage();

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤, –≤–∫–ª—é—á–∞—è —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
  Future<Map<String, String>> _getHeaders() async {
    final token = await secureStorage.read(key: 'access_token');
    if (token == null) {
      Config.mprint('üîí [CourseRepository] –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    } else {
      Config.mprint('üîí [CourseRepository] –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –∑–∞–≥—Ä—É–∂–µ–Ω');
    }
    return {
      'Content-Type': 'application/json',
      if (token != null) 'Authorization': 'Bearer $token',
    };
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤.
@override
Future<List<Course>> getAllCourses() async {
  Config.mprint('üìö [CourseRepository] –ù–∞—á–∞–ª–æ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤');
  final headers = await _getHeaders();
  final uri = Uri.parse('$baseUrl/courses/courses/all');
  Config.mprint('üì° –û—Ç–ø—Ä–∞–≤–∫–∞ GET –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ $uri');

  try {
    final response = await http
        .get(uri, headers: headers)
        .timeout(const Duration(seconds: 10));

    Config.mprint('üì¨ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —Å –∫–æ–¥–æ–º: ${response.statusCode}');
    Config.mprint('üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: ${response.body}');

    if (response.statusCode == 200) {
      final data =
          json.decode(utf8.decode(response.bodyBytes)) as List<dynamic>;
      Config.mprint('‚úÖ [CourseRepository] –ü–æ–ª—É—á–µ–Ω–æ ${data.length} –∫—É—Ä—Å–æ–≤');

      final rawCourses = data.map((json) => Course.fromJson(json)).toList();

      // ‚è≥ –û–±–æ–≥–∞—â–∞–µ–º isPaid
      final coursesWithPayment = await Future.wait(rawCourses.map((course) async {
        final isPaid = await checkCoursePayment(course.id);
        return course.copyWith(isPaid: isPaid);
      }));

      return coursesWithPayment;
    } else {
      final error = json.decode(response.body)['message'] ?? '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤';
      Config.mprint('‚ùå [CourseRepository] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤: $error');
      throw Exception(error);
    }
  } catch (e) {
    Config.mprint('üö® [CourseRepository] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤: $e');
    throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.');
  }
}
  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –ø–æ –µ–≥–æ ID.
  @override
Future<Course> getCourseByID(int courseID) async {
  Config.mprint('üîç [CourseRepository] –ù–∞—á–∞–ª–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ —Å ID: $courseID');
  final headers = await _getHeaders();
  final uri = Uri.parse('$baseUrl/courses/courses/by_id/$courseID');
  Config.mprint('üì° –û—Ç–ø—Ä–∞–≤–∫–∞ GET –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ $uri');

  try {
    final response = await http
        .get(
          uri,
          headers: headers,
        )
        .timeout(const Duration(seconds: 10));

    Config.mprint('üì¨ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —Å –∫–æ–¥–æ–º: ${response.statusCode}');
    Config.mprint('üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: ${response.body}');

    if (response.statusCode == 200) {
      final data = json.decode(utf8.decode(response.bodyBytes));
      Config.mprint('‚úÖ [CourseRepository] –ö—É—Ä—Å –ø–æ–ª—É—á–µ–Ω: ${data['title']}');
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç, –æ–∂–∏–¥–∞–µ–º—ã–π –º–æ–¥–µ–ª—å—é Course
      final courseData = {
        'id': data['id'],
        'title': data['title'],
        'description': data['description'],
        'photo_path': data['photo_path'],
        'cost': data['cost'],
        'category_id': data['category_id'],
      };
      
      final course = Course.fromJson(courseData);
      Config.mprint('üìä –î–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–∞: $course');
      return course;
    } else {
      final error = json.decode(response.body)?['message'] ?? 
          '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ (–∫–æ–¥ ${response.statusCode})';
      Config.mprint('‚ùå [CourseRepository] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞: $error');
      throw Exception(error);
    }
  }on http.ClientException catch (e) {
    Config.mprint('üåê [CourseRepository] –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: $e');
    throw Exception('–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É');
  } catch (e) {
    Config.mprint('üö® [CourseRepository] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: $e');
    throw Exception('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞');
  }
}

@override
Future<bool> checkCoursePayment(int courseId) async {
  final headers = await _getHeaders();
  final uri = Uri.parse('$baseUrl/payment/payment/status/by_course_id/$courseId');
  
  Config.mprint('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã –¥–ª—è –∫—É—Ä—Å–∞ ID: $courseId');
  Config.mprint('üì° –û—Ç–ø—Ä–∞–≤–∫–∞ GET –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ $uri');

  try {
    final response = await http.get(
      uri,
      headers: headers,
    ).timeout(const Duration(seconds: 10));

    Config.mprint('üì¨ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —Å –∫–æ–¥–æ–º: ${response.statusCode}');
    Config.mprint('üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: ${response.body}');

    // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å 200 - –æ–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞
    if (response.statusCode == 200) {
      Config.mprint('‚úÖ –ö—É—Ä—Å –æ–ø–ª–∞—á–µ–Ω');
      return true;
    }
    
    // –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã - –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞
    Config.mprint('‚ùå –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω');
    return false;
    
  } on TimeoutException {
    Config.mprint('‚è± –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã');
    return false;
  } on http.ClientException catch (e) {
    Config.mprint('üåê –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: $e');
    return false;
  } catch (e) {
    Config.mprint('üö® –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: $e');
    return false;
  }
}

  @override
Future<List<Category>> getAllCategories() async {
  Config.mprint('üîç [CourseRepository] –ù–∞—á–∞–ª–æ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
  final headers = await _getHeaders();
  final uri = Uri.parse('$baseUrl/courses/category/all');
  Config.mprint('üì° –û—Ç–ø—Ä–∞–≤–∫–∞ GET –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ $uri');

  try {
    final response = await http
        .get(
          uri,
          headers: headers,
        )
        .timeout(Duration(seconds: 10));

    Config.mprint('üì¨ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —Å –∫–æ–¥–æ–º: ${response.statusCode}');
    Config.mprint('üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: ${response.body}');

    if (response.statusCode == 200) {
      final List<dynamic> data = json.decode(utf8.decode(response.bodyBytes));
      Config.mprint('‚úÖ [CourseRepository] –ü–æ–ª—É—á–µ–Ω–æ ${data.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ JSON –≤ –æ–±—ä–µ–∫—Ç Category
      final categories = data.map((categoryJson) => Category.fromJson(categoryJson)).toList();
      
      return categories;
    } else {
      final error = json.decode(response.body)['message'] ?? '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π';
      Config.mprint('‚ùå [CourseRepository] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: $error');
      throw Exception(error);
    }
  } catch (e) {
    Config.mprint('üö® [CourseRepository] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: $e');
    throw Exception(
        '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.');
  }
}

@override
Future<List<Video>> getVideosByCourseId(int courseId) async {
  Config.mprint('üîç [CourseRepository] –ù–∞—á–∞–ª–æ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ –¥–ª—è –∫—É—Ä—Å–∞ ID: $courseId');
  final headers = await _getHeaders();
  final uri = Uri.parse('https://zavadovskayakurs.ru/api/v1/stream/stream/by_course_id/$courseId');
  Config.mprint('üì° –û—Ç–ø—Ä–∞–≤–∫–∞ GET –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ $uri');

  try {
    final response = await http
        .get(
          uri,
          headers: headers,
        )
        .timeout(Duration(seconds: 10));

    Config.mprint('üì¨ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —Å –∫–æ–¥–æ–º: ${response.statusCode}');
    Config.mprint('üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: ${response.body}');

    if (response.statusCode == 200) {
      final List<dynamic> data = json.decode(utf8.decode(response.bodyBytes));
      Config.mprint('‚úÖ [CourseRepository] –ü–æ–ª—É—á–µ–Ω–æ ${data.length} –≤–∏–¥–µ–æ');
      
      final videos = data.map((videoJson) => Video.fromJson(videoJson)).toList();
      return videos;
    } else {
      final error = json.decode(response.body)['message'] ?? '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ';
      Config.mprint('‚ùå [CourseRepository] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ: $error');
      throw Exception(error);
    }
  } on TimeoutException {
    Config.mprint('‚è± [CourseRepository] –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∏–¥–µ–æ');
    throw Exception('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
  } on http.ClientException catch (e) {
    Config.mprint('üåê [CourseRepository] –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: $e');
    throw Exception('–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É');
  } catch (e) {
    Config.mprint('üö® [CourseRepository] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: $e');
    throw Exception('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∏–¥–µ–æ');
  }
}

@override
Future<VideoPlayerController> getVideoStream(int videoId) async {
  Config.mprint('üîç [VideoRepository] –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∏–¥–µ–æ –ø–æ—Ç–æ–∫–∞ –¥–ª—è ID: $videoId');
  
  final headers = await _getHeaders();
  headers['Range'] = 'bytes=0-';
  final videoUrl = '$baseUrl/stream/stream/by_id/$videoId'; // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º .mp4
  
  Config.mprint('üì° –ó–∞–ø—Ä–æ—Å –≤–∏–¥–µ–æ –ø–æ URL: $videoUrl');

  try {
    // –î–ª—è –≤–µ–±–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π network controller
    if (kIsWeb) {
      Config.mprint('üåê –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ–±-–≤–µ—Ä—Å–∏—é –≤–∏–¥–µ–æ–ø–ª–µ–µ—Ä–∞');
      Config.mprint('—Å—Å—Ñ–ª–∫–∞ $baseUrl/stream/stream/by_id/$videoId');
      Config.mprint('$headers');
      final controller = VideoPlayerController.networkUrl(
        Uri.parse(videoUrl),
        httpHeaders: headers,
      );
      Config.mprint('$controller');
      await controller.initialize();
      Config.mprint('‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –≤–µ–±–∞');
      return controller;
    }

    // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º networkUrl —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–æ—Ç–æ–∫–æ–≤
    Config.mprint('üì± –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–±–∏–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é –≤–∏–¥–µ–æ–ø–ª–µ–µ—Ä–∞');
    final controller = VideoPlayerController.networkUrl(
      Uri.parse(videoUrl),
      httpHeaders: headers,
      videoPlayerOptions: VideoPlayerOptions(
        mixWithOthers: true,
      ),
    );

    // –¢–∞–π–º–∞—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (15 —Å–µ–∫—É–Ω–¥)
    await controller.initialize().timeout(
      const Duration(seconds: 15),
      onTimeout: () {
        controller.dispose();
        throw TimeoutException('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–¥–µ–æ –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏');
      },
    );

    Config.mprint('‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
    return controller;
  } on TimeoutException catch (e) {
    Config.mprint('‚è± –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ: $e');
    throw Exception('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ');
  } catch (e) {
    Config.mprint('üö® –æ—à–∏–±–∫–∞: $e');
    throw Exception('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∏–¥–µ–æ');
  }
}

Future<VideoPlayerController> _getConvertedWebVideo(String videoUrl, Map<String, String> headers) async {

  try {
    Config.mprint('üîÑ Initializing FFmpeg...');

    // Correct initialization method
    final ffmpeg = createFFmpeg(CreateFFmpegParam(log: true));
    await ffmpeg.load();

    // Optional: Load core from specific URL if needed
    // await ffmpeg.load({
    //   'coreURL': 'https://unpkg.com/@ffmpeg/core@0.11.0/dist/ffmpeg-core.js',
    //   'wasmURL': 'https://unpkg.com/@ffmpeg/core@0.11.0/dist/ffmpeg-core.wasm',
    // });

    Config.mprint('üì• Downloading video...');
    final response = await http.get(Uri.parse(videoUrl), headers: headers);
    final inputName = 'input_${DateTime.now().millisecondsSinceEpoch}.mp4';
    ffmpeg.writeFile(inputName, response.bodyBytes);

    Config.mprint('üîÑ Converting video...');
    const outputName = 'output.mp4';
    ffmpeg.readDir([
      '-i', inputName,
      '-c:v', 'libx264',
      '-profile:v', 'main',
      '-pix_fmt', 'yuv420p',
      '-movflags', '+faststart',
      '-c:a', 'aac',
      '-b:a', '128k',
      outputName
    ] as String);

    Config.mprint('üì§ Getting converted video...');
    final data = await ffmpeg.readFile(outputName);
    final blob = html.Blob([data], 'video/mp4');
    final url = html.Url.createObjectUrl(blob);

    Config.mprint('‚ñ∂Ô∏è Initializing player...');
    final controller = VideoPlayerController.network(url);
    await controller.initialize();
    
    // Cleanup when disposed
    controller.addListener(() {
      if (!controller.value.isInitialized) {
        html.Url.revokeObjectUrl(url);
      }
    });

    Config.mprint('‚úÖ Conversion successful');
    return controller;
  } catch (e, st) {
    Config.mprint('‚ùå Conversion failed, trying fallback: $e\n$st');
    
    // Fallback to original video
    try {
      final controller = VideoPlayerController.network(videoUrl, httpHeaders: headers);
      await controller.initialize();
      return controller;
    } catch (e) {
      throw Exception('All video playback methods failed: ${e.toString()}');
    }
  }
}

}
