// lib/data/repositories/auth_repository_impl.dart

import 'dart:async';
import 'dart:convert';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:http/http.dart' as http;
import 'package:jwt_decoder/jwt_decoder.dart'; // –ò–º–ø–æ—Ä—Ç –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JWT
import '../models/user.dart';
import 'auth_repository.dart';
import '../../config.dart';

class AuthRepositoryImpl implements AuthRepository {
  final String baseUrl;
  final FlutterSecureStorage secureStorage;

  AuthRepositoryImpl(
      {required this.baseUrl, FlutterSecureStorage? secureStorage})
      : secureStorage = secureStorage ?? const FlutterSecureStorage();

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤
  Future<void> _savePurchasedCourses(List<int> courseIds) async {
    final jsonString = json.encode(courseIds);
    await secureStorage.write(key: 'purchased_courses', value: jsonString);
    print('‚úÖ [AuthRepository] –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∫—É–ø–ª–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã: $courseIds');
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤
  Future<List<int>> _getPurchasedCourses() async {
    final jsonString = await secureStorage.read(key: 'purchased_courses');
    if (jsonString != null) {
      try {
        final List<dynamic> jsonList = json.decode(jsonString);
        final List<int> courseIds = jsonList.cast<int>();
        print('üîÑ [AuthRepository] –ü–æ–ª—É—á–µ–Ω—ã –∫—É–ø–ª–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã: $courseIds');
        return courseIds;
      } catch (e) {
        print('üö® [AuthRepository] –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤: $e');
        return [];
      }
    }
    print('üîÑ [AuthRepository] –ö—É–ø–ª–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    return [];
  }

  @override
  Future<Map<String, dynamic>> login(String email, String password) async {
    print('üîë [AuthRepository] –ù–∞—á–∞–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –ª–æ–≥–∏–Ω–∞');
    print('üìß Email: $email');
    // üîí Password: $password // **–í–∞–∂–Ω–æ:** –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª–∏

    try {
      final uri = Uri.parse('$baseUrl/auth/login');
      print('üì° –û—Ç–ø—Ä–∞–≤–∫–∞ POST –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ $uri');

      final response = await http
          .post(
            uri,
            headers: {'Content-Type': 'application/json', 'accept': 'application/json'},
            body: json.encode({'login': email, 'password': password}),
          )
          .timeout(Duration(seconds: 10)); // –î–æ–±–∞–≤–ª–µ–Ω —Ç–∞–π–º–∞—É—Ç 10 —Å–µ–∫—É–Ω–¥

      print('üì¨ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —Å –∫–æ–¥–æ–º: ${response.statusCode}');
      print('üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: ${response.body}');

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        final token = data['token']; // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –æ—Ç–≤–µ—Ç–∞
        await secureStorage.write(key: 'access_token', value: token);
        print('‚úÖ –õ–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω. –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω.');

        // –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        Map<String, dynamic> decodedToken = JwtDecoder.decode(token);
        print('üë§ –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω: $decodedToken');

        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –ø—É—Å—Ç–æ–π)
        List<int> purchasedCourses = await _getPurchasedCourses();

        return {
          ...decodedToken,
          'purchasedCourseIds': purchasedCourses,
        };
      } else {
        final error = json.decode(response.body)['message'] ?? '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞';
        print('‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞: $error');
        throw Exception(error);
      }
    } catch (e) {
      print('üö® –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ª–æ–≥–∏–Ω–∞: $e');
      throw Exception(
          '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ª–æ–≥–∏–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.');
    }
  }

  @override
  Future<Map<String, dynamic>> registration(
      String name,String phone, String email,  String password,
      {String photoPath = ""}) async {
    print('üìù [AuthRepository] –ù–∞—á–∞–ª–æ –∑–∞–ø—Ä–æ—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
    print('üßë‚Äçüíº Name: $name');
    print('üìß Email: $email');
    print('üìû Phone: $phone');
    print('üñºÔ∏è Photo path: $photoPath');
    // üîí Password: $password // **–í–∞–∂–Ω–æ:** –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª–∏

    try {
      final uri = Uri.parse('$baseUrl/auth/registration');
      print('üì° –û—Ç–ø—Ä–∞–≤–∫–∞ POST –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ $uri');

      final response = await http
          .post(
            uri,
            headers: {'Content-Type': 'application/json', 'accept': 'application/json'},
            body: json.encode({
              'name': name,
              'email': email,
              'phone': phone,
              'photo_path': photoPath,
              'password': password,
            }),
          )
          .timeout(Duration(seconds: 10));

      print('üì¨ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —Å –∫–æ–¥–æ–º: ${response.statusCode}');
      print('üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: ${response.body}');

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        final token = data['token']; // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –æ—Ç–≤–µ—Ç–∞
        await secureStorage.write(key: 'access_token', value: token);
        print('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞. –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω.');

        // –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        Map<String, dynamic> decodedToken = JwtDecoder.decode(token);
        print('üë§ –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω: $decodedToken');

        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –ø—É—Å—Ç–æ–π)
        List<int> purchasedCourses = await _getPurchasedCourses();

        return {
          ...decodedToken,
          'purchasedCourseIds': purchasedCourses,
        };
      } else {
        final error = json.decode(response.body)?['message'] ?? 
            json.decode(response.body)?['error'] ?? 
            '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏';
        print('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: $error');
        throw Exception(error);
      }
    } on TimeoutException {
      print('‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
      throw Exception('–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    } on http.ClientException catch (e) {
      print('üåê –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: $e');
      throw Exception('–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É');
    } catch (e) {
      print('üö® –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: $e');
      throw Exception('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }
  }

  @override
  Future<void> logout() async {
    print('üö™ [AuthRepository] –ù–∞—á–∞–ª–æ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');

    try {
      await secureStorage.delete(key: 'access_token');
      await secureStorage.delete(key: 'refresh_token');
      await secureStorage.delete(
          key: 'purchased_courses'); // –£–¥–∞–ª–µ–Ω–∏–µ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤
      print('‚úÖ –í—ã—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω. –¢–æ–∫–µ–Ω—ã –∏ –∫—É–ø–ª–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã —É–¥–∞–ª–µ–Ω—ã.');
    } catch (e) {
      print('üö® –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤—ã—Ö–æ–¥–∞: $e');
      throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.');
    }
  }

  @override
  Future<User> getCurrentUser() async {
    const methodName = 'getCurrentUser';
    print('üë§ [AuthRepository] –ó–∞–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');

    try {
      // 1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
      final accessToken = await secureStorage.read(key: 'access_token');
      if (accessToken == null || accessToken.isEmpty) {
        print('‚ùå $methodName: –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç');
        throw const UnauthorizedException('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
      }

      // 2. –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞
      final decodedToken = _decodeToken(accessToken);
      print('üîç $methodName: –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω: $decodedToken');

      // 3. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤
      final purchasedCourses = await _getPurchasedCourses();
      print('üõí $methodName: –ù–∞–π–¥–µ–Ω–æ –∫—É—Ä—Å–æ–≤: ${purchasedCourses.length}');

      // 4. –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      return User(
        id: decodedToken['usr']?.toString() ?? decodedToken['id']?.toString() ?? '',
        email: decodedToken['email']?.toString() ?? '',
        name: decodedToken['name']?.toString() ?? '',
        phone: decodedToken['phone']?.toString() ?? '',
        photoPath: decodedToken['photo_path']?.toString() ?? 
                  decodedToken['avatar']?.toString() ?? '',
        purchasedCourseIds: purchasedCourses,
      );
      
    } on UnauthorizedException {
      rethrow;
    } on JwtException catch (e) {
      print('üö® $methodName: –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: ${e.message}');
      throw const UnauthorizedException('–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è');
    } catch (e, stackTrace) {
      print('üö® $methodName: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: $e');
      print('üìå Stack trace: $stackTrace');
      throw AppException('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
  }

  /// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
  Map<String, dynamic> _decodeToken(String token) {
    try {
      return JwtDecoder.decode(token);
    } catch (e) {
      throw JwtException('–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JWT —Ç–æ–∫–µ–Ω');
    }
  }

  /// –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è

  @override
  Future<bool> isLoggedIn() async {
    final accessToken = await secureStorage.read(key: 'access_token');
    print('üîë [AuthRepository] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${accessToken != null}');
    return accessToken != null;
  }

  @override
  Future<void> refreshToken() async {
    print('üîÑ [AuthRepository] –ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞');

    try {
      final accessToken = await secureStorage.read(key: 'access_token');
      if (accessToken == null) {
        print('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
        throw Exception('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω');
      }

      final uri = Uri.parse('$baseUrl/auth/refresh');
      print('üì° –û—Ç–ø—Ä–∞–≤–∫–∞ POST –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ $uri —Å —Ç–æ–∫–µ–Ω–æ–º');

      final response = await http
          .post(
            uri,
            headers: {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer $accessToken'
            },
          )
          .timeout(Duration(seconds: 10)); // –î–æ–±–∞–≤–ª–µ–Ω —Ç–∞–π–º–∞—É—Ç 10 —Å–µ–∫—É–Ω–¥

      print('üì¨ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —Å –∫–æ–¥–æ–º: ${response.statusCode}');
      print('üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: ${response.body}');

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        final newToken = data['token']; // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
        await secureStorage.write(key: 'access_token', value: newToken);
        print('‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
      } else {
        final error =
            json.decode(response.body)['message'] ?? '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞';
        print('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: $error');
        throw Exception(error);
      }
    } catch (e) {
      print('üö® –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: $e');
      throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω.');
    }
  }

  Future<void> addPurchasedCourse(int courseID) async {
    print('üõí [AuthRepository] –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—É–ø–ª–µ–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞ —Å ID: $courseID');
    try {
      List<int> purchasedCourses = await _getPurchasedCourses();
      if (!purchasedCourses.contains(courseID)) {
        purchasedCourses.add(courseID);
        await _savePurchasedCourses(purchasedCourses);
        print(
            '‚úÖ [AuthRepository] –ö—É—Ä—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫—É–ø–ª–µ–Ω–Ω—ã–µ: $purchasedCourses');
      } else {
        print('‚ÑπÔ∏è [AuthRepository] –ö—É—Ä—Å —É–∂–µ –∫—É–ø–ª–µ–Ω: $courseID');
      }
    } catch (e) {
      print('üö® [AuthRepository] –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫—É–ø–ª–µ–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞: $e');
      throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–π –∫—É—Ä—Å.');
    }
  }

  /// –ú–µ—Ç–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫—É–ø–ª–µ–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞
  Future<void> removePurchasedCourse(int courseID) async {
    print('üõçÔ∏è [AuthRepository] –£–¥–∞–ª–µ–Ω–∏–µ –∫—É–ø–ª–µ–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞ —Å ID: $courseID');
    try {
      List<int> purchasedCourses = await _getPurchasedCourses();
      if (purchasedCourses.contains(courseID)) {
        purchasedCourses.remove(courseID);
        await _savePurchasedCourses(purchasedCourses);
        print('‚úÖ [AuthRepository] –ö—É—Ä—Å —É–¥–∞–ª—ë–Ω –∏–∑ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö: $purchasedCourses');
      } else {
        print('‚ÑπÔ∏è [AuthRepository] –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö: $courseID');
      }
    } catch (e) {
      print('üö® [AuthRepository] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫—É–ø–ª–µ–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞: $e');
      throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–π –∫—É—Ä—Å.');
    }
  }
}

class UnauthorizedException implements Exception {
  final String message;
  const UnauthorizedException(this.message);
}

class JwtException implements Exception {
  final String message;
  const JwtException(this.message);
}

class AppException implements Exception {
  final String message;
  const AppException(this.message);
}